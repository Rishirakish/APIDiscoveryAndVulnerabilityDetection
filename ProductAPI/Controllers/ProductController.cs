using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;

namespace ProductAPI.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class ProductController : ControllerBase
    {
        private static readonly string[] Summaries = new[]
        {
            "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"
        };

        private readonly ILogger<ProductController> _logger;

        public ProductController(ILogger<ProductController> logger)
        {
            _logger = logger;
        }

        [HttpGet]
        public IEnumerable<WeatherForecast> Get()
        {
            //using (var client = new HttpClient())
            //{
            //    client.BaseAddress = new Uri("http://localhost:8500/");
            //    client.DefaultRequestHeaders.Accept.Clear();
            //    client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
            //    //GET Method
            //    var response = client.GetAsync("v1/internal/ui/nodes?dc=dc1");
            //    response.Wait();
            //    if (response.Result.IsSuccessStatusCode)
            //    {
            //        var nodes = response.Result.Content.ReadAsStringAsync();
            //        nodes.Wait();
            //        var data = JsonConvert.DeserializeObject<List<Nodes>>(nodes.Result);
            //        foreach (var item in data.FirstOrDefault().Services)
            //        {
            //            if (string.IsNullOrEmpty(item.Address))
            //                continue;

            //            string baseUrl = "https://" + item.Address + ":" + item.port;
            //            string strCmdText = $@"/C newman run C:\Users\rishi\Downloads\postman\CheckforCommonAPIVulnerabilities.postman_collection.json --global-var ""base_url={baseUrl}"" -r htmlextra --reporters cli,junit,htmlextra --reporter-htmlextra-export index_{item.Id}.html";
                        
            //             System.Diagnostics.Process.Start("CMD.exe", strCmdText);
            //        }
            //    }
            //    else
            //    {
            //        Console.WriteLine("Internal server Error");
            //    }
            //}

            //string strCmdText = @"/C newman run C:\Users\rishi\Downloads\postman\CheckforCommonAPIVulnerabilities.postman_collection.json –global-var “base_url=bar” -r htmlextra --reporters cli,junit,htmlextra --reporter-htmlextra-export index.html";
            //System.Diagnostics.Process.Start("CMD.exe", strCmdText);

            var rng = new Random();
            return Enumerable.Range(1, 5).Select(index => new WeatherForecast
            {
                Date = DateTime.Now.AddDays(index),
                TemperatureC = rng.Next(-20, 55),
                Summary = Summaries[rng.Next(Summaries.Length)]
            })
            .ToArray();
        }
        [Route("getId")]
        [HttpGet]
        public IEnumerable<WeatherForecast> GetId()
        {
            var rng = new Random();
            return Enumerable.Range(1, 5).Select(index => new WeatherForecast
            {
                Date = DateTime.Now.AddDays(index),
                TemperatureC = rng.Next(-20, 55),
                Summary = Summaries[rng.Next(Summaries.Length)]
            })
            .ToArray();
        }

        [Route("getName")]
        [HttpGet]
        public IEnumerable<WeatherForecast> GetName()
        {
            var rng = new Random();
            return Enumerable.Range(1, 5).Select(index => new WeatherForecast
            {
                Date = DateTime.Now.AddDays(index),
                TemperatureC = rng.Next(-20, 55),
                Summary = Summaries[rng.Next(Summaries.Length)]
            })
            .ToArray();
        }
    }

    public class Nodes
    {
        public string Id { get; set; }
        public string Node { get; set; }
        public List<Services> Services { get; set; }

    }
    public class Services
    {
        public string Id { get; set; }
        public string Service { get; set; }
        public string Address { get; set; }
        public int port { get; set; }
    }
}

