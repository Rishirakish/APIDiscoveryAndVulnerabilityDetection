using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;
using VulnerabilityReports.Web.UI.Models;

namespace VulnerabilityReports.Web.UI.Controllers
{
    public class HomeController : Controller
    {
        private readonly ILogger<HomeController> _logger;

        public HomeController(ILogger<HomeController> logger)
        {
            _logger = logger;
        }

        public IActionResult Index()
        {
            List<DiscoveredAPI> discoveredAPIs = new List<DiscoveredAPI>();

            try
            {
                using (var client = new HttpClient())
                {
                    //This is the address of consul centralized registry for the discovered APIs.
                    client.BaseAddress = new Uri("http://localhost:8500/");
                    client.DefaultRequestHeaders.Accept.Clear();
                    client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
                    //GET Method to access the all the apu services from centralized registry
                    var response = client.GetAsync("v1/internal/ui/nodes?dc=dc1");
                    response.Wait();
                    if (response.Result.IsSuccessStatusCode)
                    {
                        var nodes = response.Result.Content.ReadAsStringAsync();
                        nodes.Wait();
                        var data = JsonConvert.DeserializeObject<List<Nodes>>(nodes.Result);
                        foreach (var item in data.FirstOrDefault().Services)
                        {
                            if (string.IsNullOrEmpty(item.Address))
                                continue;

                            string baseUrl = "https://" + item.Address + ":" + item.port;
                            string swaggerJsonUrl = baseUrl + "/swagger/v1/swagger.json";
                            using (WebClient wc = new WebClient())
                            {
                                var jsonString = wc.DownloadString(swaggerJsonUrl);
                                JObject jsonObject = JObject.Parse(jsonString);
                                var myElement = jsonObject.Children<JProperty>().FirstOrDefault(x => x.Name == "paths");
                                var jobj = (JObject)myElement.Value;
                                foreach (var jProp in jobj)
                                {
                                    var key = baseUrl + jProp.Key;
                                    var value = jProp.Value.Children<JProperty>().FirstOrDefault().Name;
                                    //var methodType = value
                                    discoveredAPIs.Add(new DiscoveredAPI { MethodType = value, url = key });

                                }
                            }
                            //TODO: json colletion can be passed using relative path or some network location.
                            //string strCmdText = $@"/C newman run C:\Users\rishi\Downloads\postman\CheckforCommonAPIVulnerabilities.postman_collection.json --global-var ""base_url={baseUrl}"" -r htmlextra --reporters cli,junit,htmlextra --reporter-htmlextra-export wwwroot\index_{item.Id}.html";

                            string strCmdText = $@"/C newman run wwwroot\CheckforCommonAPIVulnerabilities.postman_collection.json --global-var ""base_url={baseUrl}"" -r htmlextra --reporters cli,junit,htmlextra --reporter-htmlextra-export wwwroot\index_{item.Id}.html";

                            Process.Start("CMD.exe", strCmdText);
                        }
                    }
                }
            }
            catch (Exception)
            {
                // in case of failure, it will show the report of last successful run.
            }
            return View(discoveredAPIs);
        }

        //public ActionResult GetHtmlPage(string path)
        //{
        //    return new PartialViewResult(path, "text/html");
        //}

        public IActionResult Privacy()
        {
            return View();
        }

        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
        public IActionResult Error()
        {
            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
        }
    }

    public class Nodes
    {
        public string Id { get; set; }
        public string Node { get; set; }
        public List<Services> Services { get; set; }

    }
    public class Services
    {
        public string Id { get; set; }
        public string Service { get; set; }
        public string Address { get; set; }
        public int port { get; set; }
    }
}
