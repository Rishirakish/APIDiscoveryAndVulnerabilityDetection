using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;
using VulnerabilityReports.Web.UI.Models;

namespace VulnerabilityReports.Web.UI.Controllers
{
    public class HomeController : Controller
    {
        private readonly ILogger<HomeController> _logger;

        public HomeController(ILogger<HomeController> logger)
        {
            _logger = logger;
        }

        public IActionResult Index()
        {
            using (var client = new HttpClient())
            {
                client.BaseAddress = new Uri("http://localhost:8500/");
                client.DefaultRequestHeaders.Accept.Clear();
                client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
                //GET Method
                var response = client.GetAsync("v1/internal/ui/nodes?dc=dc1");
                response.Wait();
                if (response.Result.IsSuccessStatusCode)
                {
                    var nodes = response.Result.Content.ReadAsStringAsync();
                    nodes.Wait();
                    var data = JsonConvert.DeserializeObject<List<Nodes>>(nodes.Result);
                    foreach (var item in data.FirstOrDefault().Services)
                    {
                        if (string.IsNullOrEmpty(item.Address))
                            continue;

                        string baseUrl = "https://" + item.Address + ":" + item.port;
                        //TODO: json colletion can be passed using relative path or some network location.
                        string strCmdText = $@"/C newman run C:\Users\rishi\Downloads\postman\CheckforCommonAPIVulnerabilities.postman_collection.json --global-var ""base_url={baseUrl}"" -r htmlextra --reporters cli,junit,htmlextra --reporter-htmlextra-export wwwroot\index_{item.Id}.html";

                        Process.Start("CMD.exe", strCmdText);
                    }
                }
            }
                return View();
        }

        //public ActionResult GetHtmlPage(string path)
        //{
        //    return new PartialViewResult(path, "text/html");
        //}

        public IActionResult Privacy()
        {
            return View();
        }

        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
        public IActionResult Error()
        {
            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
        }
    }

    public class Nodes
    {
        public string Id { get; set; }
        public string Node { get; set; }
        public List<Services> Services { get; set; }

    }
    public class Services
    {
        public string Id { get; set; }
        public string Service { get; set; }
        public string Address { get; set; }
        public int port { get; set; }
    }
}
